Comandos: EKS / ECR / Docker / kubectl

####### KUBECTL FLOW

aws eks --region us-west-2 update-kubeconfig --name test-eks-xGFqhdkO
kubectl get nodes
kubectl get ns
kubectl get pods -A
kubectl get nodes
kubectl get deploy -A
kubectl describe pod $podname -A
kubectl describe pod $podname -n kube-system
kubectl get pods -A
kubectl logs --follow -l k8s-app=aws-node -n kube-system
kubectl apply -f nginx-deployment.yaml
kubectl get pods -A
kubectl get pods -l 'app=nginx' -o wide | awk {'print $1" " $3 " " $6'} | column -t
kubectl apply -f clusterip.yaml #pode usar kubectl delete para deletar também
kubectl expose deployment nginx-deployment  --type=ClusterIP  --name=nginx-service-cluster-ip
kubectl get svc
kubectl delete svc nginx-service-cluster-ip
kubectl expose deployment dockercami --port=8080 --target-port=8080 --type=LoadBalancer  --name=dockercami-loadbalancer
kubectl config --help
kubectl config get-clusters
kubectl config set-context minikube

####### SUBINDO IMAGEM NO ECR

docker images
docker tag camillamartins/dockernode:7.0 799643693239.dkr.ecr.us-west-2.amazonaws.com
aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 799643693239.dkr.ecr.us-west-2.amazonaws.com
docker push 799643693239.dkr.ecr.us-west-2.amazonaws.com/linuxtips-docker-cami:1.0
docker build -t 799643693239.dkr.ecr.us-west-2.amazonaws.com/linuxtips-docker-cami:2.0 .
docker push 799643693239.dkr.ecr.us-west-2.amazonaws.com/linuxtips-docker-cami:2.0

####### EXERCÍCIOS E DOCUMENTAÇÕES

Exercício do Cluster, Node e Load Balancer:
https://aws.amazon.com/pt/premiumsupport/knowledge-center/eks-kubernetes-services-cluster/

Exercício subindo o Docker Cami com ECR no EKS e com Dockerhub:
https://github.com/camilla-m/terraform-aulas-do-linuxtips

Repositório para criar o EKS com Terraform:
https://github.com/terraform-aws-modules/terraform-aws-eks/tree/v17.18.0/examples/basic


#pegar todos os pods, de todos os namespaces
kubectl get pods -A 

#Inforamcoes dos pods:
kubectl describe pod coredns-5c778788f4-2jx82 -n kube-system

#Logs por pod e label (describe):
kubectl logs --follow -l k8s-app=kube-dns -n kube-system

https://stackoverflow.com/questions/41509439/whats-the-difference-between-clusterip-nodeport-and-loadbalancer-service-types

#Aplicar deployment por arquivo:
kubectl apply -f nginx-deployment.yaml

└─[17:40]-(%)-[$] kubectl get pods -A
NAMESPACE     NAME                                READY   STATUS    RESTARTS   AGE
default       nginx-deployment-66b6c48dd5-6rx5s   1/1     Running   0          92s
default       nginx-deployment-66b6c48dd5-cc57k   1/1     Running   0          92s
kube-system   aws-node-6v655                      1/1     Running   0          32m
kube-system   aws-node-cxm86                      1/1     Running   0          33m
kube-system   aws-node-d2zsp                      1/1     Running   0          33m
kube-system   coredns-5c778788f4-2jx82            1/1     Running   0          36m
kube-system   coredns-5c778788f4-q2q2x            1/1     Running   0          36m
kube-system   kube-proxy-6r7kv                    1/1     Running   0          32m
kube-system   kube-proxy-fnldc                    1/1     Running   0          33m
kube-system   kube-proxy-xfhd8                    1/1     Running   0          33m

└─[17:49]-(%)-[$] kubectl get pods -l 'app=nginx' -o wide | awk {'print $1" " $3 " " $6'} | column -t
NAME                               STATUS   IP
nginx-deployment-66b6c48dd5-6rx5s  Running  10.0.2.7
nginx-deployment-66b6c48dd5-cc57k  Running  10.0.1.91

└─[17:53]-(%)-[$] kubectl get service
NAME                       TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
kubernetes                 ClusterIP   172.20.0.1      <none>        443/TCP   49m
nginx-service-cluster-ip   ClusterIP   172.20.11.209   <none>        80/TCP    59s

#port -------> container port 
#targetport ------> porta onde o container vai responder

#Excluir um service:
kubectl delete service nginx-service-cluster-ip

└─[17:59]-(%)-[$] kubectl get service
NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes               ClusterIP   172.20.0.1      <none>        443/TCP        54m
nginx-service-nodeport   NodePort    172.20.11.227   <none>        80:31590/TCP   6s

OBS::::: É o service que vai direcionar o tráfego para o Deployment correto.

...
  ports:
    - name: http 
      protocol: TCP 
      port: 80 #Porta interna do deployment, container
      targetPort: 9376 #Porta externa, exposta
  externalIps:
    80.11.12.10 #Filtra e redireciona com base nas requests vindas por esse IP público

OBS::::: Deployment que gerencia as réplicas.

#####LOADBALANCER:
service/nginx-service-loadbalancer created

┌─[gmaas@gmaas]─(~/.../dev/learn-terraform-provision-eks-cluster)(main U:1 ?:7 ✗)
└─[18:12]-(%)-[$] kubectl get service -A
NAMESPACE     NAME                         TYPE           CLUSTER-IP       EXTERNAL-IP                                                               PORT(S)         AGE
default       kubernetes                   ClusterIP      172.20.0.1       <none>                                                                    443/TCP         67m
default       nginx-service-loadbalancer   LoadBalancer   172.20.241.172   a6f97b407ac7d4a31a0b77de317edfca-1518796257.us-east-2.elb.amazonaws.com   80:30174/TCP    7s
default       nginx-service-nodeport       NodePort       172.20.11.227    <none>                                                                    80:31590/TCP    13m
kube-system   kube-dns                     ClusterIP      172.20.0.10      <none>                                                                    53/UDP,53/TCP   67m


#####ClusterIP:
Dentro do cluster

#####NodePort:
Dentro da Rede

#####LoadBalancer:
Quem tiver acesso ao Load Balancer


####ECR -> Elastic Container Registry
docker tag gmaas2/linuxtips:1.0.0 952797698032.dkr.ecr.us-east-2.amazonaws.com/linuxtips-docker-cami/dockernode:1.0.0

# Login ECR - Registry AWS:
https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html
aws ecr get-login-password --region region | docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com

Push:
docker push 952797698032.dkr.ecr.us-east-2.amazonaws.com/linuxtips-docker-cami:1.0.0

####
Kubectl - mudar de contexto:

└─[19:31]-(%)-[$] kubectl config get-clusters
NAME
minikube
kind-giropops
arn:aws:eks:us-east-2:952797698032:cluster/education-eks-vRaPY2wz
arn:aws:eks:us-east-2:952797698032:cluster/education-eks-8vMwyqOe

#Alternar context:
kubectl config set-context kind-giropops???

